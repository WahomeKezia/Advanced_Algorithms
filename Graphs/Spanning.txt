# Define a graph class to represent the graph and its edges
class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

# Helper function to find the parent of a set (used in Kruskal's algorithm)
def find_parent(parent, i):
    if parent[i] == i:
        return i
    return find_parent(parent, parent[i])

# Helper function to perform union of two sets (used in Kruskal's algorithm)
def union(parent, rank, x, y):
    root_x = find_parent(parent, x)
    root_y = find_parent(parent, y)

    if rank[root_x] < rank[root_y]:
        parent[root_x] = root_y
    elif rank[root_x] > rank[root_y]:
        parent[root_y] = root_x
    else:
        parent[root_y] = root_x
        rank[root_x] += 1

# Kruskal's algorithm to find the minimum spanning tree
def kruskal(graph):
    result = []
    graph.sort(key=lambda x: x[2])  # Sort edges by weight
    parent = [i for i in range(graph.vertices)]
    rank = [0] * graph.vertices

    for edge in graph.graph:
        u, v, w = edge
        root_u = find_parent(parent, u)
        root_v = find_parent(parent, v)

        if root_u != root_v:
            result.append(edge)
            union(parent, rank, root_u, root_v)

    return result

# Prim's algorithm to find the minimum spanning tree
def prim(graph):
    result = []
    visited = [False] * graph.vertices
    heap = [(0, 0, 0)]  # (weight, source, destination)

    while heap:
        w, u, v = heapq.heappop(heap)

        if not visited[v]:
            result.append([u, v, w])
            visited[v] = True

            for edge in graph.graph:
                if edge[0] == v and not visited[edge[1]]:
                    heapq.heappush(heap, (edge[2], edge[0], edge[1]))
                elif edge[1] == v and not visited[edge[0]]:
                    heapq.heappush(heap, (edge[2], edge[1], edge[0]))

    return result

# Example usage:
g = Graph(4)
g.add_edge(0, 1, 1)
g.add_edge(0, 2, 3)
g.add_edge(1, 2, 4)
g.add_edge(1, 3, 2)
g.add_edge(2, 3, 5)

print("Kruskal's Algorithm:")
print(kruskal(g))

print("\nPrim's Algorithm:")
print(prim(g))
